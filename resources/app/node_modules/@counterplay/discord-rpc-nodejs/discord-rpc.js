const debug = require('debug')('discord-rpc')
const EventEmitter = require('events')
const path = require('path')
const os = require('os')
const ref = require('@counterplay/ref-prebuilt')
const ffi = require('@counterplay/ffi-prebuilt')
const Struct = require('@counterplay/ref-struct-prebuilt')

const DISCORD_APPLICATION_ID = '357706468843061258'

const DiscordPresence = Struct({
	'state': 'char *',
	'details': 'char *',
	'startTimestamp': ref.types.int64,
	'endTimestamp': ref.types.int64,
	'largeImageKey': 'char *',
	'largeImageText': 'char *',
	'smallImageKey': 'char *',
	'smallImageText': 'char *',
	'partyId': 'char *',
	'partySize': ref.types.int,
	'partyMax': ref.types.int,
	'matchSecret': 'char *',
	'joinSecret': 'char *',
	'spectateSecret': 'char *',
	'instance': ref.types.uint8,
})

// Used to prefill empty buffers
const DiscordPresenceMaxLengths = {
	'state': 128,
	'details': 128,
	'largeImageKey': 32,
	'largeImageText': 128,
	'smallImageKey': 32,
	'smallImageText': 128,
	'partyId': 128,
	'matchSecret': 128,
	'joinSecret': 128,
	'spectateSecret': 128
}

const DiscordEventHandlers = Struct({
	'ready': ffi.Function(ref.types.void, []),
	'disconnected': ffi.Function(ref.types.void, []),
	'errored': ffi.Function(ref.types.void, []),
	'joinGame': ffi.Function(ref.types.void, []),
	'spectateGame': ffi.Function(ref.types.void, [])
})

const DiscordEventHandlersPtr = ref.refType(DiscordEventHandlers)
const DiscordPresencePtr = ref.refType(DiscordPresence)

let DiscordLib = null
try {
	DiscordLib = ffi.Library(path.join(__dirname, 'lib', `${os.platform()}-${os.arch()}`, 'discord-rpc'), {
		'Discord_Initialize': ['void', ['string', DiscordEventHandlersPtr, 'int', 'string']],
		'Discord_Shutdown': ['void', []],
		'Discord_RunCallbacks': ['void', []],
		'Discord_UpdatePresence': ['void', [DiscordPresencePtr]]
	})
} catch (e) {
	debug('discord lib failed to initialize')
	debug(e)
}

class DiscordRichPresence extends EventEmitter {
	constructor(applicationId = DISCORD_APPLICATION_ID, steamId = null) {
		super()
		if (!DiscordLib) {
			return
		}
		this.ready = ffi.Callback('void', [], (...args) => this.onReady(...args))
		this.disconnected = ffi.Callback('void', ['int', 'string'], (...args) => this.onDisconnected(...args))
		this.errored = ffi.Callback('void', ['int', 'string'], (...args) => this.onError(...args))
		this.joinGame = ffi.Callback('void', ['string'], (...args) => this.onJoinGame(...args))
		this.spectateGame = ffi.Callback('void', ['string'], (...args) => this.onSpectateGame(...args))
		this.discordEventHandlers = new DiscordEventHandlers({
			ready: this.ready,
			disconnected: this.disconnected,
			errored: this.errored,
			joinGame: this.joinGame,
			spectateGame: this.spectateGame
		})
		
		DiscordLib.Discord_Initialize(applicationId, this.discordEventHandlers.ref(), 1, steamId)
		DiscordLib.Discord_RunCallbacks()
		this.updateTimer = setInterval(() => {
			debug('discord tick')
			this.emit('tick')
			DiscordLib.Discord_RunCallbacks()
		}, 100)
	}
	// Passing an invalid presence object may crash application
	// as there is currently no type checking
	updatePresence(presence = {}) {
		debug('discord updatePresence')
		debug(JSON.stringify(presence))
		if (!DiscordLib) {
			return
		}
		// We convert the strings into buffers
		// Probably good idea to perform other checks or set defaults here 
		Object.keys(presence).forEach(key => {
			if (typeof presence[key] === 'string') {
				//const buf = Buffer.alloc(presence[key].length, 0, 'utf8')
				const buf = Buffer.alloc(DiscordPresenceMaxLengths[key], 0, 'utf8')
				buf.write(presence[key])
				presence[key] = buf
			}
		})
		const discordPresence = new DiscordPresence(presence)
		DiscordLib.Discord_UpdatePresence(discordPresence.ref())
	}
	shutdown() {
		debug('discord shutdown')
		if (!DiscordLib) {
			return
		}
		clearInterval(this.updateTimer)
		DiscordLib.Discord_Shutdown()
	}
	onReady() {
		debug('discord onReady')
		this.emit('ready')
	}
	onDisconnected(code, message) {
		debug('discord onDisconnected')
		this.emit('disconnected', code, message)
	}
	onError(code, message) {
		debug('discord onError')
		this.emit('error', code, message)
	}
	onSpectateGame(spectateSecret) {
		debug('discord onSpectateGame')
		this.emit('spectateGame', spectateSecret)
	}
	onJoinGame(joinSecret) {
		debug('discord onJoinGame')
		this.emit('joinGame', joinSecret)
	}
}

module.exports = DiscordRichPresence